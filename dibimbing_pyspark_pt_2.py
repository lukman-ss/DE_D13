# -*- coding: utf-8 -*-
"""Dibimbing Pyspark pt.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ELKBkdrrMpmlJPTfSn53VM41jph-4JnS
"""

! pip install pyspark

! wget https://raw.githubusercontent.com/databricks/Spark-The-Definitive-Guide/master/data/retail-data/all/online-retail-dataset.csv

from pyspark.sql import SparkSession
ss = SparkSession.builder.appName('dibimbing_pt2').master('local').getOrCreate()

from pyspark.sql.types import *
schema = StructType([
    StructField('invoice_no', IntegerType(), True),
    StructField('stock_code', StringType(), True),
    StructField('description', StringType(), True),
    StructField('quantity', IntegerType(), True),
    StructField('invoice_date', StringType(), True),
    StructField('unit_price', DoubleType(), True),
    StructField('customer_id', IntegerType(), True),
    StructField('country', StringType(), True),
])
df = ss.read.csv('/content/online-retail-dataset.csv', header=True, schema=schema)
df.show(5)

"""Data Cleaning & Transformation"""

import pyspark.sql.functions as F
df = df.withColumn('invoice_date', F.to_timestamp('invoice_date',format='M/d/yyyy H:m'))
df.show(5)

df = df.withColumn('created_by', F.lit('Cashier'))
df.show(5)

df = df.withColumn('created_by',
                   F.when(
                      F.to_date(F.col('invoice_date')) == F.to_date(F.lit('2010-12-01')),
                      'Admin'
                      )\
                   .otherwise(
                      'Cashier'
                    )
                   )
df.where(F.to_date(F.col('invoice_date')) != F.to_date(F.lit('2010-12-01'))).show(5)

df = df.withColumn('created_by',
                   F.when(
                      F.to_date(F.col('invoice_date')) == F.to_date(F.lit('2010-12-01')),
                      'Admin'
                      )\
                   .otherwise(
                      F.when(
                          F.to_date(F.col('invoice_date')) == F.to_date(F.lit('2010-12-02')),
                          'Admin#2'
                      )\
                      .otherwise('Cashier')
                    )
                   )
df.where(F.to_date(F.col('invoice_date')) == F.to_date(F.lit('2010-12-03'))).show(5)

df.withColumnRenamed('created_by','added_by').show()

df.withColumn('customer_id', F.col('customer_id').cast(StringType())).printSchema()

dedup_df = df.dropDuplicates(subset = ['invoice_no'])
dedup_df.show()

dedup_df.na.drop(subset=['invoice_no']).show()

dedup_df.na.fill({'invoice_no': 1}).show()

df.withColumn('description', F.initcap(F.col('description'))).show()

"""Data Viz"""

df = df.withColumn('sub_total', F.round(F.col('quantity') * F.col('unit_price'), 2))
df.show(5)

df_line = df.groupBy(
    F.date_format('invoice_date', 'yyyy-MM-dd').alias('invoice_date'))\
    .agg(F.round(F.sum('sub_total'),2).alias('total_per_day'))\
    .orderBy('invoice_date')
df_line.show()

pandas_df_line = df_line.toPandas()
pandas_df_line.plot(x='invoice_date', y='total_per_day', kind='line')

import plotly.express as px
px.line(pandas_df_line, x='invoice_date', y='total_per_day').show()

df_bar = df.groupBy(
    F.date_format('invoice_date', 'yyyy-MM-dd').alias('invoice_date'))\
    .count().withColumnRenamed('count','transaction_count')\
    .orderBy('invoice_date')
df_bar.show()

pandas_df_bar = df_bar.toPandas()
px.bar(pandas_df_bar, x='invoice_date',y='transaction_count', title='Daily Sales Amount').show()

df_bar_hourly = df.groupBy(
    F.date_format('invoice_date', 'H').cast(IntegerType()).alias('transaction_hour'))\
    .count().withColumnRenamed('count','transaction_count')\
    .orderBy('transaction_hour')
df_bar_hourly.show()

pandas_df_bar_hourly = df_bar_hourly.toPandas()
px.bar(pandas_df_bar_hourly, x='transaction_hour',y='transaction_count').show()

df_pie = df.groupBy('country').agg(F.sum('quantity').alias('total_quantity')).orderBy('total_quantity', ascending=False)
df_pie.show()

import plotly.express as px
pandas_df_pie = df_pie.toPandas()
pandas_df_pie.loc[pandas_df_pie['total_quantity'] < 100000, 'country'] = 'Other'
fig = px.pie(pandas_df_pie, values='total_quantity', names='country')
fig.show()

! pip install -U kaleido

fig.write_image("country.png")